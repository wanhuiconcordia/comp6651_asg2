#include <sstream>
#include <iostream>
#include <vector>
#include <fstream>
#include <chrono>
#include <string>

class Node{
private:
    long start;
    long end;
    long value;
    Node* leftChild;
    Node* rightChild;
    Node* leftHand;
    Node* rightHand;
public:
    Node(long s, long e, long v);
    bool contain(long pos) const;
    bool isLeaf() const;

    friend std::ostream& operator<<(std::ostream& os, const Node& node);
    friend class Tree;
};

std::ostream& operator<<(std::ostream& os, const Node& node){
    os << "start:" << node.start + 1 << "\t end:" << node.end + 1 << "\tvalue:" << node.value;
    return os;
}

Node::Node(long s, long e, long v):
    start(s),
    end(e),
    value(v),
    leftChild(nullptr),
    rightChild(nullptr),
    leftHand(nullptr),
    rightHand(nullptr){
}

bool Node::contain(long pos) const{
    return pos >= start && pos <= end;
}

bool Node::isLeaf() const{
    if(leftChild)
        return false;
    if(rightChild)
        return false;
    return true;
}

class Tree{
private:
    Node* root;
    Node* leafStart;
public:
    Tree(long s, long e);
    ~Tree();
    bool operate(long s, long e, long v);
    void printLeaves() const;
    long getMaximumValue() const;

private:
    Node* findLeafContains(Node* node, long pos) const;
    void clear(Node* node);
};

Tree::Tree(long s, long e){
    root = new Node(s, e, 0);
    leafStart = root;
}


Tree::~Tree(){
    clear(root);
}

void Tree::clear(Node* node){
    if(node->leftChild){
        clear(node->leftChild);
        node->leftChild = nullptr;
    }

    if(node->rightChild){
        clear(node->rightChild);
        node->rightChild = nullptr;
    }

    delete node;
    node = nullptr;
}

void Tree::printLeaves() const{
    Node* node = leafStart;
    while(node){
        std::cout << *node << std::endl;
        node = node->rightHand;
    }
}

long Tree::getMaximumValue() const{
    long m = leafStart->value;
    Node* node = leafStart->rightHand;
    while(node){
        if(node->value > m){
            m = node->value;
        }
        node = node->rightHand;
    }
    return m;
}

Node* Tree::findLeafContains(Node* node, long pos) const{
    if(node->contain(pos)){
        if(node->isLeaf()){
            return node;
        }else{
            Node* tmpNode = findLeafContains(node->leftChild, pos);
            if(tmpNode){
                return tmpNode;
            }else{
                tmpNode = findLeafContains(node->rightChild, pos);
                if(!tmpNode){
                    std::cout << "both left and right branch return nullptr. not supposed to happen" << std::endl;
                }
                return tmpNode;
            }
        }
    }else{
        return nullptr;
    }
}

bool Tree::operate(long s, long e, long v){
    bool bRet = false;

    if(root->start > s || root->end < e){
        std::cout << "The operation range:[" << s + 1 << ", " << e + 1 << "] is out of the range of array's range:[" << root->start + 1 << ", " << root->end + 1 << "]" << std::endl;
    }else{
        Node* sNode = findLeafContains(root, s);
        if(sNode){
            Node* cursor = sNode;
            if(s > sNode->start){   //s is not the start point of this node
                Node* l = new Node(sNode->start, s - 1, sNode->value);
                Node* r = new Node(s, sNode->end, sNode->value);

                l->leftHand = sNode->leftHand;
                l->rightHand = r;
                r->leftHand = l;
                r->rightHand = sNode->rightHand;

                if(sNode->leftHand){
                    sNode->leftHand->rightHand = l;
                }else{
                    leafStart = l;
                }

                if(sNode->rightHand){
                    sNode->rightHand->leftHand = r;
                }


                sNode->leftChild = l;
                sNode->rightChild = r;

                cursor = r;
            }

            while(cursor->end < e){
                cursor->value += v;
                cursor = cursor->rightHand;
            }

            if(cursor->end > e){
                Node* l = new Node(cursor->start, e, cursor->value);
                Node* r = new Node(e + 1, cursor->end, cursor->value);
                l->leftHand = cursor->leftHand;
                l->rightHand = r;
                r->leftHand = l;
                r->rightHand = cursor->rightHand;

                if(cursor->leftHand){
                    cursor->leftHand->rightHand = l;
                }

                if(cursor->rightHand){
                    cursor->rightHand->leftHand = r;
                }

                cursor->leftChild = l;
                cursor->rightChild = r;

                l->value += v;
            }else{
                cursor->value += v;
            }
            bRet = true;
        }else{
            std::cout << "cannot find [" << s << "] in the tree."  << std::endl;
            printLeaves();
        }
    }
    return bRet;
}

bool stringToNumbers(const std::string& input, long* A, int size){
    bool bRet = false;
    std::stringstream stream(input);

    for(auto i = 0; i < size; i++){
        stream >> A[i];
        if(!stream)
           break;

        bRet = true;
    }

    return bRet;
}


int main(int argc, char** argv){
    std::string inputFileName = "sample.txt";
    if(argc > 1){
        inputFileName = argv[1];
    }

    std::cout << "read from:" << inputFileName << std::endl;
    std::ifstream input(inputFileName);
    if(input.is_open()){
        long A[3];
        std::string line;
        std::getline(input, line);
        if(stringToNumbers(line, A, 2)){
            auto start = std::chrono::steady_clock::now();
            bool isOperationValid = true;
            Tree tree(0, A[0]);
            long M = A[1];
            long M_t = 0;
            while(std::getline(input, line)){
                M_t++;
                if(M_t > M){
                    std::cout << "More than " << M << " lines of operation in the input file. Ignore the rest." << std::endl;
                    break;
                }

                if(M_t % 1000 == 0){
                    std::cout << M_t << " operation" << std::endl;
                }

                if(stringToNumbers(line, A, 3)){
                    if(!tree.operate(A[0], A[1], A[2])){
                        std::cout << "Terminate" << std::endl;
                        isOperationValid = false;
                        break;
                    }
                }else{
                    std::cout << "Bad operation:[" << line << "]. Terminate" << std::endl;
                    isOperationValid = false;
                    break;
                }
            }

            if(isOperationValid){
                if(M_t < M){
                    std::cout << "Less than " << M << " lines of operation in the input file. Just do this much:" << M_t << std::endl;
                }

                std::cout << "Maximum value:" << tree.getMaximumValue() << std::endl;

                auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start).count();
                std::cout << "Spent " << duration << " milliseconds" << std::endl;
            }

        }else{
            std::cout << "Bad first line:[" << line << "]. Terminate" << std::endl;
        }

        input.close();
    }else{
        std::cout << "Please name the sample file as sample.txt or run the app with a parameter, which is the sample file name." << std::endl;
    }

    return 0;
}

